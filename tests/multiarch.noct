//
// Unit Test for JIT Porting
//

func main() {
    // Define an architecture list.
    var arch_list = [
        {name: "arm64",  toolchain: "qemu-arm64-toolchain.cmake",  qemu: "qemu-aarch64-static"},
	{name: "arm32",  toolchain: "qemu-arm32-toolchain.cmake",  qemu: "qemu-armhf-static"},
        {name: "mips64", toolchain: "qemu-mips64-toolchain.cmake", qemu: "qemu-mips64-static"},
        {name: "mips32", toolchain: "qemu-mips32-toolchain.cmake", qemu: "qemu-mips-static"},
        {name: "ppc64",  toolchain: "qemu-ppc64-toolchain.cmake",  qemu: "qemu-ppc64el-static"},
        {name: "ppc32",  toolchain: "qemu-ppc32-toolchain.cmake",  qemu: "qemu-ppc-static"},
        {name: "i386",   toolchain: "qemu-i386-toolchain.cmake",   qemu: "qemu-i386-static"},
        {name: "x86_64", toolchain: "qemu-x86_64-toolchain.cmake", qemu: "qemu-x86_64-static"}
    ];

    // Run arch tests.
    for (arch in arch_list) {
        if (arch_test(arch.name, arch.toolchain, arch.qemu) == 0) {
	    break;
	}
    }

    return 0;
}

func arch_test(name, tool, qemu) {
    // Print a header.
    print("[" + name + "]");

    // Build a binary for a specified architecture.
    if (shell(
            "cd .. && " +
            "cmake -B build-" + name + " .  && " +
            "cmake --build build-" + name)
        != 0) {
        print("xxBuild failed.");
	return 0;
    }
    print("xxBuild2 failed.");

    // Copy a binary.
    if (shell(
            "cp ../build-" + name + "/noct ./noct-arch")
        != 0) {
        print("Copy failed.");
        return 0;
    }

    // Testcase list.
    testcase = [
        "syntax/01-assign.noct",
        "syntax/02-call.noct",
        "syntax/03-string.noct",
        "syntax/04-array.noct",
        "syntax/05-dictionary.noct",
        "syntax/06-for.noct",
        "syntax/07-lambda.noct",
        "syntax/08-double-loop.noct",
        "syntax/09-call-in-loop.noct",
        "syntax/10-if-elif-else.noct",
        "syntax/11-if-cond.noct",
        "syntax/12-elif-chain.noct",
        "syntax/13-call-args.noct",
        "syntax/14-ret-val.noct",
        "syntax/15-while.noct",
        "syntax/16-unary.noct"
    ];

    // Run tests without JIT.
    print("Interpreter...");
    for(file in testcase) {
        if (!run_testcase(qemu, "--disable-jit", file)) {
            return 0;
	}
    }

    // Run tests with JIT.
    print("JIT...");
    for(file in testcase) {
        if (!run_testcase(qemu, "", file)) {
	    return 0;
	}
    }

    return 1;
}

func run_testcase(qemu, option, file) {
    print("Running " + file + " ... ");

    // Run a testcase.
    if (shell(qemu + " ./noct-arch " + option + " " + file + " > out") != 0) {
        print("Run failed.");
        return 0;
    }

    // Compare the result and the correct answer.
    if (shell("diff " + file + ".out out") != 0) {
        print("Diff.");
        return 0;
    }
	
    // Remove a temporary file.
    if (shell("rm -f out") != 0) {
        return 0;
    }

    return 1;
}
